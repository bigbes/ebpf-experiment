// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type opensslEvent struct {
	Op           uint8
	_            [3]byte
	Pid          int32
	SkippedBytes uint64
	EventId      uint64
	BlockCount   int8
	BlockTotal   uint8
	ByteSize     uint16
	Bytes        [4096]uint8
	_            [4]byte
}

// loadOpenssl returns the embedded CollectionSpec for openssl.
func loadOpenssl() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpensslBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openssl: %w", err)
	}

	return spec, err
}

// loadOpensslObjects loads openssl and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*opensslObjects
//	*opensslPrograms
//	*opensslMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpensslObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenssl()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// opensslSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensslSpecs struct {
	opensslProgramSpecs
	opensslMapSpecs
}

// opensslSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensslProgramSpecs struct {
	UprobeSslRead     *ebpf.ProgramSpec `ebpf:"uprobe_ssl_read"`
	UprobeSslWrite    *ebpf.ProgramSpec `ebpf:"uprobe_ssl_write"`
	UretprobeSslRead  *ebpf.ProgramSpec `ebpf:"uretprobe_ssl_read"`
	UretprobeSslWrite *ebpf.ProgramSpec `ebpf:"uretprobe_ssl_write"`
}

// opensslMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type opensslMapSpecs struct {
	ActiveSslReadArgsMap  *ebpf.MapSpec `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	EventAllocator        *ebpf.MapSpec `ebpf:"event_allocator"`
	Events                *ebpf.MapSpec `ebpf:"events"`
	SslFdMap              *ebpf.MapSpec `ebpf:"ssl_fd_map"`
	SslPidEnabledMap      *ebpf.MapSpec `ebpf:"ssl_pid_enabled_map"`
	SslStatsMap           *ebpf.MapSpec `ebpf:"ssl_stats_map"`
}

// opensslObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpensslObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensslObjects struct {
	opensslPrograms
	opensslMaps
}

func (o *opensslObjects) Close() error {
	return _OpensslClose(
		&o.opensslPrograms,
		&o.opensslMaps,
	)
}

// opensslMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpensslObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensslMaps struct {
	ActiveSslReadArgsMap  *ebpf.Map `ebpf:"active_ssl_read_args_map"`
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	EventAllocator        *ebpf.Map `ebpf:"event_allocator"`
	Events                *ebpf.Map `ebpf:"events"`
	SslFdMap              *ebpf.Map `ebpf:"ssl_fd_map"`
	SslPidEnabledMap      *ebpf.Map `ebpf:"ssl_pid_enabled_map"`
	SslStatsMap           *ebpf.Map `ebpf:"ssl_stats_map"`
}

func (m *opensslMaps) Close() error {
	return _OpensslClose(
		m.ActiveSslReadArgsMap,
		m.ActiveSslWriteArgsMap,
		m.EventAllocator,
		m.Events,
		m.SslFdMap,
		m.SslPidEnabledMap,
		m.SslStatsMap,
	)
}

// opensslPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpensslObjects or ebpf.CollectionSpec.LoadAndAssign.
type opensslPrograms struct {
	UprobeSslRead     *ebpf.Program `ebpf:"uprobe_ssl_read"`
	UprobeSslWrite    *ebpf.Program `ebpf:"uprobe_ssl_write"`
	UretprobeSslRead  *ebpf.Program `ebpf:"uretprobe_ssl_read"`
	UretprobeSslWrite *ebpf.Program `ebpf:"uretprobe_ssl_write"`
}

func (p *opensslPrograms) Close() error {
	return _OpensslClose(
		p.UprobeSslRead,
		p.UprobeSslWrite,
		p.UretprobeSslRead,
		p.UretprobeSslWrite,
	)
}

func _OpensslClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl_x86_bpfel.o
var _OpensslBytes []byte

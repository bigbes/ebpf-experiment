// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openssl_rbEvent struct {
	Op           uint8
	_            [3]byte
	Pid          int32
	SkippedBytes uint64
	EventId      uint64
	BlockCount   int8
	BlockTotal   uint8
	ByteSize     uint16
	Bytes        [1024]uint8
	_            [4]byte
}

// loadOpenssl_rb returns the embedded CollectionSpec for openssl_rb.
func loadOpenssl_rb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openssl_rbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openssl_rb: %w", err)
	}

	return spec, err
}

// loadOpenssl_rbObjects loads openssl_rb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openssl_rbObjects
//	*openssl_rbPrograms
//	*openssl_rbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenssl_rbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenssl_rb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openssl_rbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openssl_rbSpecs struct {
	openssl_rbProgramSpecs
	openssl_rbMapSpecs
}

// openssl_rbSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openssl_rbProgramSpecs struct {
	UretprobeSslRead  *ebpf.ProgramSpec `ebpf:"uretprobe_ssl_read"`
	UretprobeSslWrite *ebpf.ProgramSpec `ebpf:"uretprobe_ssl_write"`
}

// openssl_rbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openssl_rbMapSpecs struct {
	EventAllocator *ebpf.MapSpec `ebpf:"event_allocator"`
	Events         *ebpf.MapSpec `ebpf:"events"`
}

// openssl_rbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenssl_rbObjects or ebpf.CollectionSpec.LoadAndAssign.
type openssl_rbObjects struct {
	openssl_rbPrograms
	openssl_rbMaps
}

func (o *openssl_rbObjects) Close() error {
	return _Openssl_rbClose(
		&o.openssl_rbPrograms,
		&o.openssl_rbMaps,
	)
}

// openssl_rbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenssl_rbObjects or ebpf.CollectionSpec.LoadAndAssign.
type openssl_rbMaps struct {
	EventAllocator *ebpf.Map `ebpf:"event_allocator"`
	Events         *ebpf.Map `ebpf:"events"`
}

func (m *openssl_rbMaps) Close() error {
	return _Openssl_rbClose(
		m.EventAllocator,
		m.Events,
	)
}

// openssl_rbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenssl_rbObjects or ebpf.CollectionSpec.LoadAndAssign.
type openssl_rbPrograms struct {
	UretprobeSslRead  *ebpf.Program `ebpf:"uretprobe_ssl_read"`
	UretprobeSslWrite *ebpf.Program `ebpf:"uretprobe_ssl_write"`
}

func (p *openssl_rbPrograms) Close() error {
	return _Openssl_rbClose(
		p.UretprobeSslRead,
		p.UretprobeSslWrite,
	)
}

func _Openssl_rbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openssl_rb_x86_bpfel.o
var _Openssl_rbBytes []byte
